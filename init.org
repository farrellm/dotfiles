#+TITLE: Emacs init file written in org-mode
#+AUTHOR: Matthew Farrell
#+EMAIL: farrellm@alum.mit.edu

* package management
** initialization
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

** use-package
http://cachestocaches.com/2015/8/getting-started-use-package/
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)

  (use-package diminish
    :ensure t)
#+END_SRC

* basic
** benchmark
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :disabled t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

** common
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** window only
#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)
    (setq-default cursor-type 'bar))

  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+END_SRC

** console only
#+BEGIN_SRC emacs-lisp
  (unless window-system
    (xterm-mouse-mode 1))
#+END_SRC

** It's annoying to have to type 'yes' to answer questions. One letter is enough for confirmation.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Ivy + Counsel + Swiper
#+BEGIN_SRC emacs-lisp
  (use-package flx)
  (use-package smex)

  (use-package ivy
    :init
    (ivy-mode 1)
    :config
    (setq ivy-re-builders-alist
          '((t . ivy--regex-fuzzy))))

  (use-package counsel
    :init
    (counsel-mode 1)
    :bind
    (("C-x x" . 'counsel-M-x)))

  (use-package swiper
    :bind
    (("C-s" . 'swiper-isearch)
     ("C-w" . 'ivy-yank-word)))
#+END_SRC

** auto-revert buffers
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** parenthesis highlight
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (set-face-foreground 'show-paren-match "white")
#+END_SRC

** follow symlinks to version controlled files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks nil)
#+END_SRC

** global keybindings
#+BEGIN_SRC emacs-lisp
  (defun prev-window ()
    "previous window"
    (interactive)
    (other-window -1))

  ;; https://www.emacswiki.org/emacs/UnfillParagraph
  ;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)

  (global-set-key (kbd "C-x p") 'prev-window)
  (define-key global-map "\M-Q" 'unfill-paragraph)
  (global-set-key (kbd "C-X C-b") 'ibuffer)
  (global-set-key (kbd "C-X g") 'goto-line)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+END_SRC

** whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)

  (use-package ws-butler
    :init
    (ws-butler-global-mode))
#+END_SRC

** backups
https://www.emacswiki.org/emacs/BackupDirectory
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

* packages
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.1)
    (global-company-mode)
    :bind ("C-<tab>" . 'company-complete-common-or-cycle))

  (use-package company-flx
    :after company
    :config (company-flx-mode +1))
#+END_SRC

** ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :defer t
    :config
    (setq ess-use-ido t))
#+END_SRC

*** R
#+BEGIN_SRC emacs-lisp
  ;; From Martin Maechler <maechler at stat.math.ethz.ch>:
  (with-eval-after-load "comint"
    (setq comint-scroll-to-bottom-on-output 'others)   ; not current, dflt is nil
    ;; (setq comint-scroll-show-maximum-output t)      ; I find this too jumpy
    (define-key comint-mode-map [up]
      'comint-previous-matching-input-from-input)
    (define-key comint-mode-map [down]
      'comint-next-matching-input-from-input)
    (define-key comint-mode-map "\C-a" 'comint-bol-or-process-mark))
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-tree)

    :config
    (evil-mode 1)
    (evil-set-initial-state 'deft-mode 'insert)

    (define-key evil-insert-state-map (kbd "C-k") #'sp-kill-hybrid-sexp)

    (define-key evil-normal-state-map (kbd ">") 'sp-slurp-hybrid-sexp)
    (define-key evil-normal-state-map (kbd "<") 'sp-forward-barf-sexp)
    (define-key evil-normal-state-map (kbd "M->") 'sp-backward-barf-sexp)
    (define-key evil-normal-state-map (kbd "M-<") 'sp-backward-slurp-sexp))

  (use-package evil-collection
    :after evil
    :custom (evil-collection-company-use-tng nil)
    :config (evil-collection-init))

  (use-package evil-leader
    :after evil
    :config (global-evil-leader-mode))

  (use-package evil-smartparens
    :after (evil smartparens)
    :hook (smartparens-enabled . evil-smartparens-mode))

  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1))

  (use-package evil-org
    :after evil
    :hook (org-mode . evil-org-mode)
    :diminish evil-org-mode)

  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '(("." . "~/.undo-tree"))))
#+END_SRC

** fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :defer t
    :config
    (add-hook 'fish-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'fish_indent-before-save))))
#+END_SRC

** groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure nil
    :defer t
    :config
    (setq groovy-indent-offset 2))
#+END_SRC

** haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :hook ((haskell-mode . interactive-haskell-mode)
           (haskell-mode . haskell-indentation-mode)
           (haskell-mode . haskell-auto-insert-module-template))
    :config
    (setq haskell-font-lock-quasi-quote-modes nil))

  (use-package ormolu
    :hook (haskell-mode . ormolu-format-on-save-mode)
    :bind
    (:map haskell-mode-map
          ("C-c r" . ormolu-format-buffer))
    :custom
    (ormolu-cabal-default-extensions t))

  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC

** idris2
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package idris2-mode
    :vc (:url "https://github.com/idris-community/idris2-mode"
         :rev :newest)
    :defer t
    :config
    ;; Fixes lag when editing idris code with evil
    (defun ~/evil-motion-range--wrapper (fn &rest args)
      "Like `evil-motion-range', but override field-beginning for performance.
  See URL `https://github.com/ProofGeneral/PG/issues/427'."
      (cl-letf (((symbol-function 'field-beginning)
                 (lambda (&rest args) 1)))
        (apply fn args)))
    (advice-add #'evil-motion-range :around #'~/evil-motion-range--wrapper))
#+END_SRC

** julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :defer t)

  ;; (use-package julia-staticlint
  ;;   ;; https://github.com/dmalyuta/julia-staticlint
  ;;   ;; Emacs Flycheck support for StaticLint.jl
  ;;   :ensure nil
  ;;   :quelpa ((julia-staticlint :fetcher github
  ;;                                :repo "dmalyuta/julia-staticlint"
  ;;                                :files (:defaults "julia_staticlint_server.jl"
  ;;                                                  "julia_staticlint_client.jl")))
  ;;   :hook ((julia-mode . julia-staticlint-activate))
  ;;   :config
  ;;   (julia-staticlint-init))

  ;; (use-package julia-snail
  ;;   :requires vterm
  ;;   :hook (julia-mode . julia-snail-mode)
  ;;   )
#+END_SRC

** latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t)
#+END_SRC

** ligatures
#+BEGIN_SRC emacs-lisp
  (use-package pragmatapro-lig
    :vc (:url "https://github.com/lumiknit/emacs-pragmatapro-ligatures"
         :rev :newest))

  (when window-system
    (require 'pragmatapro-lig)
    (pragmatapro-lig-global-mode))
#+END_SRC

** lsp
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :hook ((haskell-mode . eglot-ensure)
           (python-mode . eglot-ensure))
    :config
    (setq-default eglot-workspace-configuration
                  '())
    :custom
    (eglot-autoshutdown t)  ;; shutdown language server after closing last file
    (eglot-confirm-server-initiated-edits nil)  ;; allow edits without confirmation
    )
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind (("C-x g" . 'magit-status)))
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :hook ((org-mode . auto-fill-mode)
           (org-mode . flyspell-mode)
           (org-mode . org-display-inline-images))
    :config
    (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")

    (setq org-export-allow-bind-keywords t
          ;; org-startup-indented t
          org-src-fontify-natively t

          ;; disable evaluation confirmations
          org-confirm-babel-evaluate nil)

    (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (haskell . t)
         (python . t)
         (R . t))))

  (defun org-babel-invalidate-results ()
    "invalidated all cached babel results"
    (interactive)
    (while (re-search-forward "#\\+RESULTS\\[[[:alnum:]]+\\]" nil t)
      (replace-match "#+RESULTS[]" nil nil)))

  (setq org-roam-v2-ack t)
  (use-package org-roam
    :defer t
    :config
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))
    (org-roam-db-autosync-mode)
    :custom
    (org-roam-directory "/home/farrellm/Dropbox/org/roam")
    :bind ((("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ;; ("C-c n g" . org-roam-graph-show)
             )
            :map org-mode-map
            (("C-c n i" . org-roam-node-insert))))

  (use-package deft
    :bind ("<f8>" . deft)
    :commands (deft)
    :config
    (setq deft-recursive t
          deft-directory "~/Dropbox/org"))
#+END_SRC

** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure nil
    :defer t)

  (use-package racer
    :ensure nil
    :after rust-mode
    :hook ((rust-mode . racer-mode)
           (racer-mode . eldoc-mode))
    :config
    (setq racer-rust-src-path "/home/mfarrell/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

  (use-package cargo
    :ensure nil
    :after rust-mode
    :hook (rust-mode-hook . cargo-minor-mode))
#+END_SRC

** scala
#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure nil
    :defer t)

  (use-package sbt-mode
    :ensure nil
    :defer t)

  (use-package scala-mode
    :ensure nil
    :defer t)
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (smartparens-global-strict-mode))
#+END_SRC

old configuration:
https://github.com/Fuco1/smartparens/wiki/Example-configuration

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :defer t
    :hook ((vterm-mode . turn-off-smartparens-strict-mode)
           (vterm-mode . turn-off-smartparens-mode)))
#+END_SRC

** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package nix-mode
    :defer t)
#+end_src

* miscellaneous
** local
#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "~/.config/emacs/local.el")
    (load "~/.config/emacs/local"))
#+END_SRC

** bug fix
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+END_SRC
