#+TITLE: Emacs init file written in org-mode
#+AUTHOR: Matthew Farrell
#+EMAIL: farrellm@alum.mit.edu

* package management
** initialization
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)

  ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  (package-initialize)
#+END_SRC

** use-package
http://cachestocaches.com/2015/8/getting-started-use-package/
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t)
  (setq use-package-always-ensure t)
  (setq use-package-always-pin "melpa-stable")

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'diminish)
    (package-install 'bind-key))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)

  (setq package-pinned-packages
        '((epl . "melpa-stable")
          (evil-magit . "melpa-stable")
          (f . "melpa-stable")
          (find-file-in-project . "melpa-stable")
          (flx . "melpa-stable")
          (ghub . "melpa-stable")
          (git-commit . "melpa-stable")
          (goto-chg . "melpa-stable")
          (highlight-indentation . "melpa-stable")
          (ivy . "melpa-stable")
          (magit-popup . "melpa-stable")
          (memoize . "melpa-stable")
          (pkg-info . "melpa-stable")
          (popup . "melpa-stable")
          (prop-menu . "melpa-stable")
          (pyvenv . "melpa-stable")
          (s . "melpa-stable")
          ;; (with-editor . "melpa-stable") - melpa for magit
          (yasnippet . "melpa-stable")
          ))
#+END_SRC

* basic
** benchmark
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :disabled t
    :demand t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

** common
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** window only
#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)
    (setq-default cursor-type 'bar))

  (use-package dracula-theme
    ;; :if window-system
    :init
    (add-hook 'after-init-hook (lambda () (load-theme 'dracula t))))
#+END_SRC

** console only
#+BEGIN_SRC emacs-lisp
  ;; (unless window-system)
#+END_SRC

** It's annoying to have to type 'yes' to answer questions. One letter is enough for confirmation.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Ido, which is short for "Interactively Do Things," is an amazingly efficient way to select files and switch buffers.
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (ido-everywhere 1)

  (use-package ido-completing-read+
    :demand t
    :config (ido-ubiquitous-mode 1))

  (use-package flx-ido
    :demand t
    :init
    ;; disable ido faces to see flx highlights.
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil)
    :config
    (flx-ido-mode 1))

  (use-package smex
    :demand t
    :config (smex-initialize))
#+END_SRC

** auto-revert buffers
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** parenthesis highlight
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (set-face-foreground 'show-paren-match "white")
#+END_SRC

** follow symlinks to version controlled files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks nil)
#+END_SRC

** global keybindings
#+BEGIN_SRC emacs-lisp
  (defun prev-window ()
    "previous window"
    (interactive)
    (other-window -1))

  ;; https://www.emacswiki.org/emacs/UnfillParagraph
  ;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)

  (global-set-key (kbd "C-x p") 'prev-window)
  (define-key global-map "\M-Q" 'unfill-paragraph)
  (global-set-key (kbd "C-x x") 'smex)
  (global-set-key (kbd "C-X C-b") 'ibuffer)
  (global-set-key (kbd "C-X g") 'goto-line)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

  (global-set-key (kbd "C-<tab>") 'company-complete-common-or-cycle)
#+END_SRC

** whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** backups
https://www.emacswiki.org/emacs/BackupDirectory
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

* packages
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :init (setq company-idle-delay 0.1)
    :config (global-company-mode))

  (use-package company-flx
    :demand t
    :pin melpa
    :config (company-flx-mode +1))
#+END_SRC

** clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)

  (use-package cider
    :config
    ;; Log communication with the nREPL server
    (setq nrepl-log-messages t)
    (setq nrepl-hide-special-buffers t)
    ;; Prevent the auto-display of the REPL buffer
    (setq cider-repl-pop-to-buffer-on-connect nil)
    ;; Enable eldoc in Clojure buffers
    (add-hook 'cider-mode-hook #'eldoc-mode))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp
  (defun count-last-sexp ()
         (interactive)
         (cider-interactive-eval
           (format "(count %s)"
                   (cider-last-sexp))))

  (defun nth-from-last-sexp (n)
         (interactive "p")
         (cider-interactive-eval
           (format "(nth %s %s)"
                   (cider-last-sexp) n)))

  (defun spit-scad-last-sexp ()
    (interactive)
    (cider-interactive-eval
      (format
        "(require 'scad-clj.scad)
         (spit \"eval.scad\" (scad-clj.scad/write-scad %s))"
        (cider-last-sexp))))

  (defun frame-last-sexp ()
    (interactive)
    (cider-interactive-eval
      (format
       "(doto (javax.swing.JFrame. \"eval\")
          (.. (getContentPane) (add %s))
          (.pack)
          (.show))"
       (cider-last-sexp))))

  (defun benchmark-last-sexp ()
    (interactive)
    (cider-interactive-eval
      (format "(require 'criterium.core)
               (criterium.core/quick-benchmark %s)"
              (cider-last-sexp))))

  (with-eval-after-load "cider"
    (define-key cider-mode-map (kbd "C-c c") 'count-last-sexp)
    (define-key cider-mode-map (kbd "C-c n") `nth-from-last-sexp)
    (define-key cider-mode-map (kbd "C-c 3") 'spit-scad-last-sexp)
    (define-key cider-mode-map (kbd "C-c f") 'frame-last-sexp)
    (define-key cider-mode-map (kbd "C-c b") 'benchmark-last-sexp))
#+END_SRC

*** misc
#+BEGIN_SRC emacs-lisp
  (defvar clojure-defun-indents '(match resize translate rotate scale mirror))

  ;; (add-hook 'clojure-mode-hook (lambda ()
  ;;                                (clj-refactor-mode 1)))
#+END_SRC
** ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :config
    (setq ess-use-ido t))
#+END_SRC

*** autoload
#+BEGIN_SRC emacs-lisp
  (autoload 'R-mode "ess-site" "Major mode for editing R source.
  See `ess-mode' for more help." t)
  (add-to-list 'auto-mode-alist '("\\.R\\'" . R-mode))
#+END_SRC

*** R
#+BEGIN_SRC emacs-lisp
  ;; From Martin Maechler <maechler at stat.math.ethz.ch>:
  (with-eval-after-load "comint"
    (setq comint-scroll-to-bottom-on-output 'others)   ; not current, dflt is nil
    ;; (setq comint-scroll-show-maximum-output t)      ; I find this too jumpy
    (define-key comint-mode-map [up]
      'comint-previous-matching-input-from-input)
    (define-key comint-mode-map [down]
      'comint-next-matching-input-from-input)
    (define-key comint-mode-map "\C-a" 'comint-bol-or-process-mark))
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :pin melpa  ;; TODO - melpa-stable after evil-smartparens bug fix merged
    :init
    (setq evil-want-integration nil)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-k") #'sp-kill-hybrid-sexp)

    (define-key evil-normal-state-map (kbd "M-x") 'smex)
    (define-key evil-insert-state-map (kbd "M-x") 'smex)

    (define-key evil-normal-state-map (kbd ">") 'sp-slurp-hybrid-sexp)
    (define-key evil-normal-state-map (kbd "<") 'sp-forward-barf-sexp)
    (define-key evil-normal-state-map (kbd "M->") 'sp-backward-barf-sexp)
    (define-key evil-normal-state-map (kbd "M-<") 'sp-backward-slurp-sexp))

  (use-package evil-collection
    :demand t
    :pin melpa
    :custom (evil-collection-company-use-tng nil)
    :config (evil-collection-init))

  (use-package evil-leader
    :demand t
    :config (global-evil-leader-mode))

  (use-package evil-smartparens
    :pin melpa  ;; TODO - melpa-stable after evil-smartparens bug fix merged
    :hook (smartparens-enabled . evil-smartparens-mode))

  (use-package evil-surround
    :demand t
    :config (global-evil-surround-mode 1))

  (use-package evil-org
    :pin melpa
    :hook (org-mode . evil-org-mode)
    :diminish evil-org-mode
    :config (evil-org-set-key-theme))

  (use-package undo-tree
    :diminish undo-tree-mode)
#+END_SRC

** fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :config
    (add-hook 'fish-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'fish_indent-before-save))))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :demand t
    :hook ((elpy-mode . flycheck-mode)
           (emacs-lisp-mode . flycheck-mode)
           (ensime-mode . flycheck-mode)
           (groovy-mode . flycheck-mode)
           (rust-mode . flycheck-mode)
           (shell-script-mode . flycheck-mode)))
#+END_SRC

** groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :pin melpa ;; want latest
    :init
    (setq groovy-indent-offset 2))
#+END_SRC

** haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)

  (use-package intero
    :hook (haskell-mode . intero-mode))

  (use-package hindent
    :pin melpa ;; want latest
    :hook (haskell-mode . hindent-mode))
#+END_SRC

** idris
#+BEGIN_SRC emacs-lisp
  (use-package idris-mode)
#+END_SRC

** latex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :pin gnu)
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :config
    (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s"))
   ;; '(org-latex-pdf-process (quote ("pdflatex --shell-escape -interaction nonstopmode -output-directory %o %f" "pdflatex --shell-escape -interaction nonstopmode -output-directory %o %f" "pdflatex --shell-escape -interaction nonstopmode -output-directory %o %f")))
#+END_SRC

*** misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** export
#+BEGIN_SRC emacs-lisp
  (defvar org-export-allow-bind-keywords t)
#+END_SRC

*** babel
**** misc
#+BEGIN_SRC emacs-lisp
  (defvar org-startup-indented t)
  (defvar org-src-fontify-natively t)

  (defun org-babel-invalidate-results ()
    "invalidated all cached babel results"
    (interactive)
    (while (re-search-forward "#\\+RESULTS\\[[[:alnum:]]+\\]" nil t)
      (replace-match "#+RESULTS[]" nil nil)))
#+END_SRC

**** disable evaluation confirmations
#+BEGIN_SRC emacs-lisp
  (defvar org-confirm-babel-evaluate nil)
#+END_SRC

**** inline images
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (add-hook 'org-mode-hook 'org-display-inline-images)
#+END_SRC

**** load languages
#+BEGIN_SRC emacs-lisp
  (defvar inferior-julia-program-name "/usr/bin/julia")
  (add-to-list 'load-path "~/.emacs.d/ob-julia")

  (with-eval-after-load "org"
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (haskell . t)
       (julia . t)
       (R . t))))
#+END_SRC

** python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :demand t
    :config
    (elpy-enable)
    (setq elpy-modules
          (delq 'elpy-module-highlight-indentation elpy-modules))

    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))
#+END_SRC

** parens
#+BEGIN_SRC emacs-lisp
  (use-package adjust-parens
    :pin gnu
    :ensure t
    :load-path "elpa/adjust-parens-3.0"
    :hook ((clojure-mode . adjust-parens-mode)
           (emacs-lisp-mode . adjust-parens-mode))
    :init
    (require 'adjust-parens))

  (use-package aggressive-indent
    :hook (clojure-mode . aggressive-indent-mode))
#+END_SRC

** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)

  (use-package racer
    :after rust-mode
    :hook (rust-mode . racer-mode)
    :config
    (defvar racer-rust-src-path "/home/mfarrell/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src")
    (add-hook 'racer-mode-hook #'eldoc-mode))

  (use-package cargo
    :after rust-mode
    :hook (rust-mode-hook . cargo-minor-mode))
#+END_SRC

** scala
#+BEGIN_SRC emacs-lisp
  (use-package ensime)
  (use-package sbt-mode)
  (use-package scala-mode)
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :demand t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (smartparens-global-strict-mode))
#+END_SRC

old configuration:
https://github.com/Fuco1/smartparens/wiki/Example-configuration

* miscellaneous
** local
#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "~/.emacs.d/local.el")
    (load "~/.emacs.d/local"))
#+END_SRC

** bug fix
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+END_SRC
