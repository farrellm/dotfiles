#+TITLE: Emacs init file written in org-mode
#+AUTHOR: Matthew Farrell
#+EMAIL: farrellm@alum.mit.edu

* package management

** initialization
#+BEGIN_SRC emacs-lisp
  (when (< emacs-major-version 27)
    (package-initialize))

  ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

** use-package
http://cachestocaches.com/2015/8/getting-started-use-package/
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
  (setq use-package-always-pin "melpa-stable")

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)

    (package-install 'diminish)
    (package-install 'bind-key))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)

  (setq package-pinned-packages
        '((dash . "melpa-stable")
          (epl . "melpa-stable")
          (f . "melpa-stable")
          (find-file-in-project . "melpa-stable")
          (flx . "melpa-stable")
          (ghub . "melpa-stable")
          (git-commit . "melpa-stable")
          (goto-chg . "melpa-stable")
          (highlight-indentation . "melpa-stable")
          (ivy . "melpa-stable")
          (magit-popup . "melpa-stable")
          (memoize . "melpa-stable")
          (pkg-info . "melpa-stable")
          (popup . "melpa-stable")
          (prop-menu . "melpa-stable")
          (pyvenv . "melpa-stable")
          (s . "melpa-stable")
          (sesman . "melpa-stable")
          ;; (with-editor . "melpa-stable") - melpa for magit
          (yasnippet . "melpa-stable")
          ))
#+END_SRC

* basic
** benchmark
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :disabled t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

** common
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** window only
#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)
    (setq-default cursor-type 'bar))

  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+END_SRC

** console only
#+BEGIN_SRC emacs-lisp
  (unless window-system
    (xterm-mouse-mode 1))
#+END_SRC

** It's annoying to have to type 'yes' to answer questions. One letter is enough for confirmation.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Ido, which is short for "Interactively Do Things," is an amazingly efficient way to select files and switch buffers.
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (ido-everywhere 1)

  (use-package ido-completing-read+
    :config (ido-ubiquitous-mode 1))

  (use-package flx-ido
    :init
    ;; disable ido faces to see flx highlights.
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil)
    :config
    (flx-ido-mode 1))

  (global-set-key (kbd "C-x x") 'execute-extended-command)

  (use-package smex
    :commands (smex smex-major-mode-commands)
    :bind (("M-x" . 'smex)
           ("C-x x" . 'smex)
           ("M-X" . 'smex-major-mode-commands)
           ("C-c C-c M-x" . 'execute-extended-command)))

#+END_SRC

** auto-revert buffers
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** parenthesis highlight
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (set-face-foreground 'show-paren-match "white")
#+END_SRC

** follow symlinks to version controlled files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks nil)
#+END_SRC

** global keybindings
#+BEGIN_SRC emacs-lisp
  (defun prev-window ()
    "previous window"
    (interactive)
    (other-window -1))

  ;; https://www.emacswiki.org/emacs/UnfillParagraph
  ;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)

  (global-set-key (kbd "C-x p") 'prev-window)
  (define-key global-map "\M-Q" 'unfill-paragraph)
  (global-set-key (kbd "C-X C-b") 'ibuffer)
  (global-set-key (kbd "C-X g") 'goto-line)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+END_SRC

** whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** backups
https://www.emacswiki.org/emacs/BackupDirectory
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

* packages
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.1)
    (global-company-mode)
    :bind ("C-<tab>" . 'company-complete-common-or-cycle))

  (use-package company-flx
    :pin melpa ;; not in mepla-stable
    :after company
    :config (company-flx-mode +1))
#+END_SRC

** ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :defer t
    :config
    (setq ess-use-ido t))
#+END_SRC

*** R
#+BEGIN_SRC emacs-lisp
  ;; From Martin Maechler <maechler at stat.math.ethz.ch>:
  (with-eval-after-load "comint"
    (setq comint-scroll-to-bottom-on-output 'others)   ; not current, dflt is nil
    ;; (setq comint-scroll-show-maximum-output t)      ; I find this too jumpy
    (define-key comint-mode-map [up]
      'comint-previous-matching-input-from-input)
    (define-key comint-mode-map [down]
      'comint-next-matching-input-from-input)
    (define-key comint-mode-map "\C-a" 'comint-bol-or-process-mark))
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    ;; (setq evil-want-integration t)
    ;; (setq evil-want-integration nil)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)

    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-k") #'sp-kill-hybrid-sexp)

    (define-key evil-normal-state-map (kbd ">") 'sp-slurp-hybrid-sexp)
    (define-key evil-normal-state-map (kbd "<") 'sp-forward-barf-sexp)
    (define-key evil-normal-state-map (kbd "M->") 'sp-backward-barf-sexp)
    (define-key evil-normal-state-map (kbd "M-<") 'sp-backward-slurp-sexp))

  (use-package evil-collection
    :after evil
    :custom (evil-collection-company-use-tng nil)
    :config (evil-collection-init))

  (use-package evil-leader
    :after evil
    :config (global-evil-leader-mode))

  (use-package evil-smartparens
    :after (evil smartparens)
    :hook (smartparens-enabled . evil-smartparens-mode))

  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1))

  (use-package evil-org
    :after evil
    :hook (org-mode . evil-org-mode)
    :diminish evil-org-mode)

  (use-package undo-tree
    :diminish undo-tree-mode)
#+END_SRC

** fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :defer t
    :config
    (add-hook 'fish-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'fish_indent-before-save))))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :pin melpa ;; want latest
    :config
    (setq flycheck-global-modes '(not))
    (global-flycheck-mode))
#+END_SRC

** groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :pin melpa ;; want latest
    :ensure nil
    :defer t
    :config
    (setq groovy-indent-offset 2))
#+END_SRC

** haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :hook ((haskell-mode . interactive-haskell-mode)
           (haskell-mode . haskell-indentation-mode)
           (haskell-mode . haskell-auto-insert-module-template)))

  (use-package ormolu
    :pin melpa ;; want latest
    :hook (haskell-mode . ormolu-format-on-save-mode)
    :bind
    (:map haskell-mode-map
          ("C-c r" . ormolu-format-buffer)))

  (use-package lsp-haskell
    :pin melpa ;; want latest
    :after lsp
    ;; :config
    ;; (setq lsp-haskell-process-path-hie "ghcide")
    ;; (setq lsp-haskell-process-args-hie '())
    )
#+END_SRC

** idris
#+BEGIN_SRC emacs-lisp
  (use-package idris-mode
    :pin melpa ;; want latest
    :defer t)
  ;; (add-to-list 'load-path "~/.emacs.d/ob-idris")
#+END_SRC

** julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :pin melpa ;; want latest
    :defer t)

  (use-package julia-snail
    :pin melpa ;; want latest
    :hook (julia-mode . julia-snail-mode)
    :config (progn
              ;; order matters, unfortunately:
              (add-to-list 'display-buffer-alist
                           ;; match buffers named "*julia" in general
                           '("\\*julia"
                             ;; actions:
                             (display-buffer-reuse-window display-buffer-same-window)))
              (add-to-list 'display-buffer-alist
                           ;; when displaying buffers named "*julia" in REPL mode
                           '((lambda (bufname _action)
                               (and (string-match-p "\\*julia" bufname)
                                    (with-current-buffer bufname
                                      (bound-and-true-p julia-snail-repl-mode))))
                             ;; actions:
                             (display-buffer-reuse-window display-buffer-pop-up-window)))
              ))

  ;; (use-package lsp-julia
  ;;   :pin melpa
  ;;   :defer t
  ;;   :init
  ;;   (with-eval-after-load "julia-mode" (require 'lsp-julia))
  ;;   (setq lsp-julia-package-dir nil)
  ;;   :config
  ;;   (setq lsp-julia-default-environment "~/.julia/environments/v1.3"
  ;;         lsp-julia-default-depot "~/.julia"))
#+END_SRC

** latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :pin gnu
    :defer t)
#+END_SRC

** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :pin melpa ;; want latest
    :hook (((c++-mode
             haskell-mode
             python-mode)
            . lsp)
           (lsp-mode . yas-minor-mode))
    :commands lsp
    :config
    (setq lsp-prefer-flymake nil))

  (use-package lsp-ui
    :pin melpa ;; want latest
    :commands lsp-ui-mode)

  (use-package yasnippet
    :after lsp-mode)
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind (("C-x g" . 'magit-status)))

  (use-package evil-magit
    :defer t
    :after (evil magit)
    :init (require 'evil-magit))
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :defer t
    :hook ((org-mode . auto-fill-mode)
           (org-mode . flyspell-mode)
           (org-mode . org-indent-mode)
           (org-mode . org-display-inline-images))
    :config
    (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")

    (setq org-export-allow-bind-keywords t
          org-startup-indented t
          org-src-fontify-natively t

          ;; disable evaluation confirmations
          org-confirm-babel-evaluate nil)

    (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (haskell . t)
         (python . t)
         (R . t))))

  (defun org-babel-invalidate-results ()
    "invalidated all cached babel results"
    (interactive)
    (while (re-search-forward "#\\+RESULTS\\[[[:alnum:]]+\\]" nil t)
      (replace-match "#+RESULTS[]" nil nil)))

  (use-package emacsql)
  (use-package emacsql-sqlite3)

  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "/home/farrellm/Dropbox/org/roam")
    :bind (:map org-roam-mode-map
            (("C-c n l" . org-roam)
             ("C-c n f" . org-roam-find-file)
             ("C-c n g" . org-roam-graph-show))
            :map org-mode-map
            (("C-c n i" . org-roam-insert))
            (("C-c n I" . org-roam-insert-immediate)))
    )
#+END_SRC

** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :defer t)

  (use-package racer
    :after rust-mode
    :hook ((rust-mode . racer-mode)
           (racer-mode . eldoc-mode))
    :config
    (setq racer-rust-src-path "/home/mfarrell/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

  (use-package cargo
    :after rust-mode
    :hook (rust-mode-hook . cargo-minor-mode))
#+END_SRC

** scala
#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure nil
    :defer t)

  (use-package sbt-mode
    :ensure nil
    :defer t)

  (use-package scala-mode
    :ensure nil
    :defer t)
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (smartparens-global-strict-mode))
#+END_SRC

old configuration:
https://github.com/Fuco1/smartparens/wiki/Example-configuration

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :pin melpa ;; not in mepla-stable
    :hook ((vterm-mode . turn-off-smartparens-strict-mode)
           (vterm-mode . turn-off-smartparens-mode)))
#+END_SRC

** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package nix-mode
    :defer t)
#+end_src

* miscellaneous
** local
#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "~/.config/emacs/local.el")
    (load "~/.config/emacs/local"))
#+END_SRC

** bug fix
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+END_SRC
